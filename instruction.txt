    1.Git安装（略）。

　　2.创建版本库

　　首先，选择一个合适的地方（我选择了D盘，我的电脑是Win 7），常见一个空目录：
$ mkdir Git
$ cd Git
$ pwd//显示当前的路径
/d/Git
　注：Windows下，路径名不要包含中文，因为Git对中文支持不给力！

　　第二步，通过git init命令把这个目录变成Git可以管理的仓库：
$ git init
Initialized empty Git repository in /d/Git/.git/
　　这样就创建了你的Git仓库。

 　　接下来，我们上传一个文件到Git。编辑一个readme.txt文件，内容如下：
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
　　将其放到/d/Git目录下，因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。

　　将一个文件放到Git仓库需要两步：

　　　　(1)使用git add将文件添加到仓库：
$ git add readme.txt
　　　　(2)使用git commit将文件提交到仓库：
git commit -m "wrote a readme file"
[master 48b9a84] wrote a readme file
 1 file changed, 2 insertions(+)
　　注：git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。

　　commit可以一次提交多个文件：
$ git add file1.txt
$ git add file2.txt
$ git add file3.txt
$ git commit -m "add 3 files."

（（第五步：创建SSH KEY。先看一下你C盘用户目录下有没有.ssh目录，有的话看下里面
有没有id_rsa和id_rsa.pub这两个文件，有就跳到下一步，没有就通过下面命令创建

   $ ssh-keygen -t rsa -C "youremail@example.com"
       然后一路回车。这时你就会在用户下的.ssh目录里找到id_rsa和id_rsa.pub这两个>文件


      第六步：登录Github,找到右上角的图标，打开点进里面的Settings，再选中里面的SSH and GPG KEYS，点击右上角的New SSH key，然后Title里面随便填，再把刚才id_rsa.pub里面的内容复制到Title下面的Key内容框里面，最后点击Add SSH key，这样就完成了SSH Key的加密。
））
  $ git push -u origin master 
  把本地仓库的项目推送到远程仓库（也就是Github）上

 
 代码配置部分详细解释：：
（1）通过命令git init把这个文件夹变成Git可管理的仓库
这时你会发现TEST里面多了个.git文件夹，它是Git用来跟踪和管理版本库的。如果你看不到，是因为它默认是隐藏文件，那你就需要设置一下让隐藏文件可见。
（2）第一步:用git add命令告诉git,我要把文件添加到版本库中
格式：
$ git add readme.txt
这样就把文件添加进去了，什么？没有任何消息?，Unix哲学"没有消息就是最好的消息"，所以说明添加成功了；有的盆友可能想，我要是有两个文件我要写两次？，当然不是，多个文件可以一起提交，使用逗号分隔，还有没有别的更快捷的方法，当然有，你只需要写git add .就可以一次性完成所有文件的添加工作

这时候你就可以把你的项目粘贴到这个本地Git仓库里面（粘贴后你可以通过git status来查看你当前的状态），然后
通过git add把项目添加到仓库（或git add .把该目录下的所有文件添加到仓库，注意点是用空格隔开的）。在这个过程中你其实可以一直使用git status来查看你当前的状态。

第二步:用git commit -m "xxx" 将多次add添加的文件提交到版本库中
$ git commit -m "创建了一个readme.txt"
简单解释一下,-m "xxx"是提交的描述，这个描述一定要写的有意义，方便你也方便他人可以很快的找到改动记录，那这个参数可以不填吗，当然也是可以的，但是强烈不建议，这里我也不给出这个方法了，想知道的盆友自行Google， 
为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件。
-m后面引号里面是本次提交的注释内容，这个可以不写，但最好写上，不然会报错，详情自行Google。 好了，我们本地Git仓库这边的工作做完了，下面就到了连接远程仓库（也就是连接Github）

      由于本地Git仓库和Github仓库之间的传输是通过SSH加密的，所以连接时需要设置一下：

      第五步：创建SSH KEY。先看一下你C盘用户目录下有没有.ssh目录，有的话看下里面有没有id_rsa和id_rsa.pub这两个文件，有就跳到下一步，没有就通过下面命令创建

   $ ssh-keygen -t rsa -C "youremail@example.com"
       然后一路回车。这时你就会在用户下的.ssh目录里找到id_rsa和id_rsa.pub这两个文件


      第六步：登录Github,找到右上角的图标，打开点进里面的Settings，再选中里面的SSH and GPG KEYS，点击右上角的New SSH key，然后Title里面随便填，再把刚才id_rsa.pub里面的内容复制到Title下面的Key内容框里面，最后点击Add SSH key，这样就完成了SSH Key的加密。具体步骤也可看下面：









        第七步：在Github上创建一个Git仓库。

     你可以直接点New repository来创建，比如我创建了一个TEST2的仓库（因为我里面已经有了一个test的仓库，所以不能再创建TEST仓库）。



        第八步：在Github上创建好Git仓库之后我们就可以和本地仓库进行关联了，根据创建好的Git仓库页面的提示，可以在本地TEST仓库的命令行输入：

$ git remote add origin https://github.com/guyibang/TEST2.git

        注意origin后面加的是你Github上创建好的仓库的地址。



      第九步：关联好之后我们就可以把本地库的所有内容推送到远程仓库（也就是Github）上了，通过：

$ git push -u origin master
       由于新建的远程仓库是空的，所以要加上-u这个参数，等远程仓库里面有了内容之后，下次再从本地库上传内容的时候只需下面这样就可以了：
$ git push origin master
        上传项目的过程可能需要等一段时间，完成之后是这样的：



        这时候你再重新刷新你的Github页面进入刚才新建的那个仓库里面就会发现项目已经成功上传了：



        至此就完成了将本地项目上传到Github的整个过程。

      另外，这里有个坑需要注意一下，就是在上面第七步创建远程仓库的时候，如果你勾选了Initialize this repository with a README（就是创建仓库的时候自动给你创建一个README文件），那么到了第九步你将本地仓库内容推送到远程仓库的时候就会报一个failed to push some refs to https://github.com/guyibang/TEST2.git的错。



      这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并以下：

$ git pull --rebase origin master

       这时你再push就能成功了。



     总结：其实只需要进行下面几步就能把本地项目上传到Github

     1、在本地创建一个版本库（即文件夹），通过git init把它变成Git仓库；

     2、把项目复制到这个文件夹里面，再通过git add .把项目添加到仓库；

     3、再通过git commit -m "注释内容"把项目提交到仓库；

     4、在Github上设置好SSH密钥后，新建一个远程仓库，通过git remote add origin https://github.com/guyibang/TEST2.git将本地仓库和远程仓库进行关联；

     5、最后通过git push -u origin master把本地仓库的项目推送到远程仓库（也就是Github）上；（若新建远程仓库的时候自动创建了README文件会报错，解决办法看上面）。

     参考文献：https://www.cnblogs.com/lixiaolun/p/4360732.html
               https://blog.csdn.net/yhq1913/article/details/79184239
	       https://blog.csdn.net/liuweixiao520/article/details/78971221
